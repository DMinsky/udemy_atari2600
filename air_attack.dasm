	processor 6502
	include "vcs.h"
	include "macro.h"

PlayerHeight = 9

	seg.u variables
	org $80
PlayerXPos	byte
PlayerYPos	byte
EnemyXPos	byte
EnemyYPos	byte
PAnimOffset	byte

	seg code
	org $F000

Start:
	CLEAN_START
	sei
	cld
	ldx #$FF
	txs

Init:
	lda #99
	sta PlayerXPos 
	lda #10
	sta PlayerYPos
	lda #99
	sta EnemyXPos
	lda #70
	sta EnemyYPos

Frame:
	lda #2
	sta VSYNC
	sta VBLANK
	REPEAT 3
		sta WSYNC
	REPEND
	lda #0
	sta VSYNC
	sta PAnimOffset

	lda #$AD
	sta COLUBK
	lda #$C6
	sta COLUPF

	lda #%11111111
	sta PF0
	lda #%11110000
	sta PF1

	lda #%00000001
	sta CTRLPF


	sta WSYNC

; Read Input
InputUp:
	lda #%00010000
	bit SWCHA
	bne InputDown
	inc PlayerYPos
InputDown:
	lda #%00100000
	bit SWCHA
	bne InputLeft
	dec PlayerYPos
InputLeft:
	lda #%01000000
	bit SWCHA
	bne InputRight
	dec PlayerXPos
	lda #16
	sta PAnimOffset
InputRight:
	lda #%10000000
	bit SWCHA
	bne NoInput
	inc PlayerXPos
	lda #16
	sta PAnimOffset
NoInput:
	sta WSYNC

	lda PlayerXPos
	ldy 0
	jsr MoveHorizontal

	sta WSYNC

	lda EnemyXPos
	ldy 1
	jsr MoveHorizontal
	
	sta WSYNC
	sta HMOVE

MoveEnemy:
	dec EnemyYPos
	sec
	lda EnemyYPos
	cmp #0
	bpl .NoNeedToReset
	; If reached zero position -- reset
	lda #96
	sta EnemyYPos
	; TODO also set a new horizontal position here
.NoNeedToReset:


	REPEAT 33
		sta WSYNC
	REPEND
	lda #0
	sta VBLANK

	ldx #96
Line:
CheckPlayer:
	txa
	sec
	sbc PlayerYPos
	cmp PlayerHeight
	bcc DrawPlayer
	lda #0

DrawPlayer:
	clc
	adc PAnimOffset
	tay
	lda PlayerSpriteNormal,Y
	sta GRP0
	lda PlayerSpriteNormalColor,Y
	sta COLUP0
	sta WSYNC

CheckEnemy:
	txa
	sec
	sbc EnemyYPos
	cmp PlayerHeight
	bcc DrawEnemy
	lda #0

DrawEnemy:
	tay
	lda EnemySprite,Y
	sta GRP1
	lda EnemySpriteColor,Y
	sta COLUP1
	sta WSYNC

	dex
	bne Line

	lda #2
	sta VBLANK
	REPEAT 30
		sta WSYNC
	REPEND
	jmp Frame

; X position in A register
; Y register is used for sprite choose
; 1 - HMP0 player 0
; 2 - HMP1 player 1
; 3 - HMM0 missile 0
; 4 - HMM1 missile 1
; 5 - HMBL ball
MoveHorizontal subroutine
	sta WSYNC
	sec
	; all this shit is about to position p0 sprite horizontally
	; (x + 68) / 15 cycles waiting 
	; x is TIA color cycles. Kinda pixels
	; 68 because of horizontal blank
	; 15 because it's 5 x 3. Where 5 is CPU cycles wasted by 
	; sbs and bcs, 2 and 3 cycles
	; and x3 because 1 CPU cycle is 3 TIA cycles
	; Reminder goes to fine hpos value
.DivideLoop:
	sbc #15
	bcs .DivideLoop

	eor #7
	asl
	asl
	asl
	asl

	sta HMP0,y	; set fine value (from -8 to 7)
	sta RESP0,y	; set rough "15" value
	rts

	org #$FFB4
PlayerSpriteNormal:
        .byte #%00000000;$00
        .byte #%01000100;$1E  
        .byte #%11111110;$02
        .byte #%01111100;$02
        .byte #%00111000;$02
        .byte #%00111000;$AE
        .byte #%00010000;$AC
        .byte #%00010000;$F0

PlayerSpriteNormalColor:
        .byte #$00;
        .byte #$1E;
        .byte #$02;
        .byte #$02;
        .byte #$02;
        .byte #$AE;
        .byte #$AE;
        .byte #$02;

PlayerSpriteTilt:
        .byte #%00000000;$00
        .byte #%00101000;$1E
        .byte #%01111100;$02
        .byte #%00111000;$02
        .byte #%00111000;$02
        .byte #%00010000;$AE
        .byte #%00010000;$AC
        .byte #%00010000;$F0

PlayerSpriteTiltColor:
        .byte #$00;
        .byte #$1E;
        .byte #$02;
        .byte #$02;
        .byte #$02;
        .byte #$AE;
        .byte #$AC;
        .byte #$F0;

EnemySprite:
        .byte #%00000000;$00
        .byte #%01000100;$42
        .byte #%11111110;$02
        .byte #%11111110;$02
        .byte #%00111000;$02
        .byte #%00101000;$42
        .byte #%01111100;$02
        .byte #%00010000;$40

EnemySpriteColor
        .byte #$00;
        .byte #$42;
        .byte #$02;
        .byte #$02;
        .byte #$02;
        .byte #$42;
        .byte #$02;
        .byte #$40;

EndOfSprites:

	org $FFFC
	word Start
	word Start
