	processor 6502
	include "vcs.h"
	include "macro.h"
	
	seg.u variables
	org $80

PlayerXPos	byte

	seg code
	org $f000

Start:
	sei
	cld
	ldx #$ff
	txs

	CLEAN_START
	lda #10
	sta PlayerXPos
	lda #$aa
	sta COLUBK

NextFrame:
	lda #2
	sta VSYNC
	sta VBLANK

	sta WSYNC
	sta WSYNC
	sta WSYNC
	lda #0
	sta VSYNC

	lda PlayerXPos
	and #$7F	; kinda dump way to be sure PlayerXPos is positive

	sec
	sta WSYNC
	sta HMCLR	; c_3 clear all the horizontal movement


	; all this shit is about to position p0 sprite horizontally
	; (x + 68) / 15 cycles waiting 
	; x is TIA color cycles. Kinda pixels
	; 68 because of horizontal blank
	; 15 because it's 5 x 3. Where 5 is CPU cycles wasted by 
	; sbs and bcs, 2 and 3 cycles
	; and x3 because 1 CPU cycle is 3 TIA cycles
	; Reminder goes to fine hpos value
DivideLoop:
	sbc #15 ; c_2
	bcs DivideLoop ; c_2

	eor #7 ; c_2
	asl ; c_2
	asl ; c_2
	asl ; c_2
	asl ; c_2

	sta HMP0	; c_3 set fine value (from -8 to 7)
	sta RESP0	; c_3 set rough "15" value
	sta WSYNC
	sta HMOVE	; apply horizontal movement

	REPEAT 35
		sta WSYNC
	REPEND
	lda #0
	sta VBLANK

	REPEAT 50
		sta WSYNC
	REPEND

	ldx #8
DrawPlayer:
	lda Player,X
	sta GRP0
	lda PlayerColors,X
	sta COLUP0

	sta WSYNC

	dex
	bne DrawPlayer
	lda #0
	sta GRP0

	REPEAT #134
		STA WSYNC
	REPEND

	lda #2
	sta VBLANK
	REPEAT 29
		sta WSYNC
	REPEND

; One WSYNC goes from Overscan to here
; SWCHA is joystick input for two players
; Player 0 is 4 MSB and Player 1 is 4 LSB
; 0 bit means that button is pressed
; bits order right, left, down, up
InputLeft:
	lda #%01000000
	bit SWCHA
	bne InputRight
	dec PlayerXPos
InputRight:
	lda #%10000000
	bit SWCHA
	bne NoInput
	inc PlayerXPos
NoInput:
	sta WSYNC
	jmp NextFrame

	org $ffea
Player:
	byte %00000000	;    
	byte %00111100	;   ####  
	byte %01111110	;  ######  
	byte %11111111	; ########
	byte %11111111	; ########
	byte %11111111	; ########
	byte %01111110	;  ###### 
	byte %00010000	;    #    
	byte %00111000	;   ###   

PlayerColors:
	byte $40	; Red gradient
	byte $40	; Red gradient
	byte $42	;
	byte $44	;
	byte $44	;
	byte $48	;
	byte $48	;
	byte $ca	; Dark green
	byte $c4	; Dark green

	org $fffc
	.word Start
	.word Start
	
